<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crop Rates</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            overflow: hidden; /* Hide horizontal overflow */
        }

 /* Create a container for the blurred background */
        .background-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            filter: blur(7px); /* Apply background blur effect */
        }

        /* Style the background image */
        .background-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }


        .container {
            max-width: 800px;
            margin: 20px auto;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
            padding: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            overflow: auto; /* Make the table scrollable */
        }

        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #007bff;
            color: #fff;
        }

        .back-button {
            text-align: center;
            margin-top: 20px;
        }

        .back-button button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s ease-in-out;
        }

        .back-button button:hover {
            background-color: #0056b3;
        }

        .search-container {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 20px;
        }

        .search-input {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="background-container">
        <img class="background-image" src="bg0.jpg" alt="Background Image">
    </div>
    <div class="container">
        <h1>Crop Rates</h1>
        <div class="search-container">
            <input type="text" class="search-input" id="search" placeholder="Search Crop">
        </div>
        <table>
            <thead>
                <tr>
                    <th>Crop Name</th>
                    <th>Rate (per kg)</th>
                </tr>
            </thead>
            <tbody id="crop-data">

            </tbody>
        </table>
        <form action="/presentnotify">
            <div class="back-button">
            <button>Back</button>
        </div>
        </form>
    </div>
    <script>
        const apiUrl = 'https://api.data.gov.in/resource/9ef84268-d588-465a-a308-a864a43d0070?api-key=579b464db66ec23bdd000001947f87cde07b48484fd30850d478cb7f&format=json';

        // Get references to the search input and table body
        const searchInput = document.getElementById('search');
        const tableBody = document.getElementById('crop-data');

        // Function to filter and display data based on search input
        function filterData() {
            const searchTerm = searchInput.value.toLowerCase();
            const cropData = data.records;

            // Clear the table body
            tableBody.innerHTML = '';

            // Filter and display matching rows
            cropData.forEach(item => {
                if (item.commodity.toLowerCase().includes(searchTerm)) {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${item.commodity}</td>
                        <td>â‚¹${item.modal_price}</td>
                    `;
                    tableBody.appendChild(row);
                }
            });
        }

        // Fetch data from the API
        fetch(apiUrl)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Store the data globally for filtering
                window.data = data;

                // Display all data initially
                filterData();
            })
            .catch(error => {
                // Handle errors
                console.error('Error fetching data:', error);
            });

        // Add an event listener to the search input for real-time filtering
        searchInput.addEventListener('input', filterData);
    </script>
</body>
</html>
