// Generated by CoffeeScript 1.10.0
var CoffeeLinter, formatError, fs, linter, util;

linter = require('coffeelint');

util = require('util');

fs = require('fs');

formatError = function(error) {
  var evidence, msg;
  evidence = (error.rule ? "\n\n" + error.rule + "\n" : "\n");
  return msg = error.level + ": " + error.rule + " at line " + error.lineNumber + ". " + (error.context || '');
};

module.exports = CoffeeLinter = (function() {
  CoffeeLinter.prototype.brunchPlugin = true;

  CoffeeLinter.prototype.type = 'javascript';

  CoffeeLinter.prototype.extension = 'coffee';

  function CoffeeLinter(config) {
    var cfg, coffeelintJson, error, error1, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8;
    this.config = config;
    cfg = (ref = (ref1 = (ref2 = this.config) != null ? (ref3 = ref2.plugins) != null ? ref3.coffeelint : void 0 : void 0) != null ? ref1 : (ref4 = this.config) != null ? ref4.coffeelint : void 0) != null ? ref : {};
    if ((ref5 = this.config) != null ? ref5.coffeelint : void 0) {
      console.warn("Warning: config.coffeelint is deprecated, move it to config.plugins.coffeelint");
    }
    this.useCoffeelintJson = cfg.useCoffeelintJson;
    this.pattern = (ref6 = cfg.pattern) != null ? ref6 : RegExp("(" + (((ref7 = this.config.paths) != null ? (ref8 = ref7.watched) != null ? ref8.join("|") : void 0 : void 0) || "app") + ").*\\.coffee$");
    if (this.useCoffeelintJson) {
      try {
        coffeelintJson = JSON.parse(fs.readFileSync('coffeelint.json'));
        this.options = coffeelintJson;
      } catch (error1) {
        error = error1;
        throw new Error('useCoffeelintJson is true but coffeelint.json does not exist');
      }
    } else {
      this.options = cfg.options;
    }
  }

  CoffeeLinter.prototype.lint = function(data, path, callback) {
    var err, error;
    error = (function() {
      var error1;
      try {
        return (linter.lint(data, this.options)).filter(function(error) {
          return error != null;
        }).map(formatError).join('\n');
      } catch (error1) {
        err = error1;
        return err;
      }
    }).call(this);
    if (error) {
      return callback(error);
    } else {
      return callback();
    }
  };

  return CoffeeLinter;

})();
